package pkg

import (
	"fmt"
	"log"
	"os"

	ggen "github.com/PlayerR9/go-commons/generator"
)

var (
	// Logger is the logger.
	Logger *log.Logger
)

func init() {
	Logger = log.New(os.Stdout, "[node]: ", log.LstdFlags)
}

type GenData struct {
	PackageName string

	TypeName string

	NodeName string
	NodeSig  string

	Generics string

	Noder string
}

// SetPackageName implements the generator.Generater interface.
func (gd *GenData) SetPackageName(pkg_name string) bool {
	if gd == nil {
		return false
	}

	gd.PackageName = pkg_name

	return true
}

var (
	Generator *ggen.CodeGenerator[*GenData]
)

func init() {
	tmp, err := ggen.NewCodeGeneratorFromTemplate[*GenData]("", templ)
	if err != nil {
		Logger.Fatalf("Failed to create code generator: %s", err.Error())
	}

	tmp.AddDoFunc(func(gd *GenData) error {
		sig, err := ggen.MakeTypeSign(GenericsFlag, gd.NodeName, "")
		if err != nil {
			return fmt.Errorf("failed to make type sig: %w", err)
		}

		gd.NodeSig = sig

		return nil
	})

	tmp.AddDoFunc(func(gd *GenData) error {
		gd.Generics = GenericsFlag.String()
		return nil
	})

	tmp.AddDoFunc(func(gd *GenData) error {
		if gd.PackageName == "ast" {
			gd.Noder = "Noder"
		} else {
			gd.Noder = "ast.Noder"
		}

		return nil
	})

	Generator = tmp
}

// templ is the template for the ast node.
const templ = `// Code generated by go generate; do not edit.
package {{ .PackageName }}

{{ if ne .PackageName "ast" }}import (
	"iter"
	"strconv"
	"strings"

	"github.com/PlayerR9/grammar/ast"
){{ else }}import (
	"iter"
	"strconv"
	"strings"
){{ end }}

// {{ .NodeName }} is a node in a ast.
type {{ .NodeName }}{{ .Generics }} struct {
	Parent, FirstChild, NextSibling, LastChild, PrevSibling *{{ .NodeSig }}

	Type {{ .TypeName }}
	Data string
	Pos int
}

// IsLeaf implements the {{ .Noder }} interface.
func (n {{ .NodeSig }}) IsLeaf() bool {
	return n.FirstChild == nil
}

// AddChild implements the {{ .Noder }} interface.
func (n *{{ .NodeSig }}) AddChild(target {{ .Noder }}) {
	if target == nil {
		return
	}

	tmp, ok := target.(*{{ .NodeSig }})
	if !ok {
		return
	}
	
	tmp.NextSibling = nil
	tmp.PrevSibling = nil

	last_child := n.LastChild

	if last_child == nil {
		n.FirstChild = tmp
	} else {
		last_child.NextSibling = tmp
		tmp.PrevSibling = last_child
	}

	tmp.Parent = n
	n.LastChild = tmp
}

// AddChildren implements the {{ .Noder }} interface.
func (n *{{ .NodeSig }}) AddChildren(children []{{ .Noder }}) {
	if len(children) == 0 {
		return
	}
	
	var valid_children []*{{ .NodeSig }}

	for _, child := range children {
		if child == nil {
			continue
		}

		c, ok := child.(*{{ .NodeSig }})
		if !ok {
			continue
		}

		valid_children = append(valid_children, c)
	}

	if len(valid_children) == 0 {
		return
	}

	// Deal with the first child
	first_child := valid_children[0]

	first_child.NextSibling = nil
	first_child.PrevSibling = nil

	last_child := n.LastChild

	if last_child == nil {
		n.FirstChild = first_child
	} else {
		last_child.NextSibling = first_child
		first_child.PrevSibling = last_child
	}

	first_child.Parent = n
	n.LastChild = first_child

	// Deal with the rest of the children
	for i := 1; i < len(valid_children); i++ {
		child := valid_children[i]

		child.NextSibling = nil
		child.PrevSibling = nil

		last_child := n.LastChild
		last_child.NextSibling = child
		child.PrevSibling = last_child

		child.Parent = n
		n.LastChild = child
	}
}

// String implements the {{ .Noder }} interface.
func (n {{ .NodeSig }}) String() string {
	var builder strings.Builder

	builder.WriteString(strconv.Itoa(n.Pos))
	builder.WriteString(":Node[")
	builder.WriteString(n.Type.String())

	if n.Data != "" {
		builder.WriteString(" (")
		builder.WriteString(strconv.Quote(n.Data))
		builder.WriteRune(')')
	}

	builder.WriteRune(']')

	return builder.String()
}

// New{{ .NodeName }} creates a new node with the given data.
//
// Parameters:
//   - n_type: The type of the node.
//   - data: The data of the node.
//   - pos: The position of the node in the source code.
//
// Returns:
//   - {{ .NodeSig }}: The newly created node.
func New{{ .NodeName }}{{ .Generics }}(n_type {{ .TypeName }}, data string, pos int) {{ .NodeSig }} {
	return {{ .NodeSig }}{
		Type: n_type,
		Data: data,
		Pos:  pos,
	}
}
	
// DirectChild returns an iterator that iterates over the direct children of the node
// from the first to the last.
//
// Returns:
//   - iter.Seq[*{{ .NodeSig }}]: The iterator. Never returns nil.
func (n {{ .NodeSig }}) DirectChild() iter.Seq[*{{ .NodeSig }}]] {
	return func(yield func(child *{{ .NodeSig }}) bool) {
		for c := n.FirstChild; c != nil; c = c.NextSibling {
			if !yield(c) {
				return
			}
		}
	}
}

// BackwardChild returns an iterator that iterates over the direct children of the node
// from the last to the first.
//
// Returns:
//   - iter.Seq[*{{ .NodeSig }}]: The iterator. Never returns nil.
func (n {{ .NodeSig }}) BackwardChild() iter.Seq[*{{ .NodeSig }}] {
	return func(yield func(child *{{ .NodeSig }}) bool) {
		for c := n.LastChild; c != nil; c = c.PrevSibling {
			if !yield(c) {
				return
			}
		}
	}
}`
